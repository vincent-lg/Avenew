# Copyright (c) 2020-20201, LE GOFF Vincent
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.

# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.

"""Formatter class."""

from scripting.formatter.abc import FORMATTERS
from scripting.formatter.exceptions import NewLineFormat

class Formatter:

    """
    Optional formatter, to format the language in a nice way.

    This formatting option is not mandatory.  The so-called "nice"
    way is mostly subjective, it adds spaces between
    some symbols and remove ambiguity by trying to format in a consistent
    manner.  It uses the list of tokens generated by the lexer to
    try and improve formatting.

    """

    def __init__(self, tokens):
        self.tokens = iter(tokens)

    async def format(self) -> str:
        """
        Format the program.

        Returns:
            program (str): the formatted program.

        """
        lines = []
        while (line := await self.read_next_line()):
            lines.append(line)
        return "\n".join(lines)

    async def read_next_line(self):
        """Read the next line of token, formatting it."""
        line = ""
        previous = None
        for token in self.tokens:
            formatter = FORMATTERS.get(token.name)
            if formatter is None:
                to_add = token.matched
            else:
                try:
                    if (to_add := await formatter.format(token, previous)):
                        previous = token
                except NewLineFormat:
                    break

            line += to_add

        return line
